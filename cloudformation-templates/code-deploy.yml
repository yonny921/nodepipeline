AWSTemplateFormatVersion: '2010-09-09'
Description: >
  CloudFormation template for creating a VPC, Application Load Balancer with Auto Scaling Group
  using Launch Template for Amazon Linux instances with UserData.

AWSTemplateFormatVersion: "2010-09-09"
Description: AWS CodePipeline for Node Builds
Parameters:
  GitHubToken:
    NoEcho: true
    Type: String
    Description: Github Token generated from
  GitHubRepoOwner:
    Type: String
    Description: Owner of the GitHub Repository
  GitHubRepoName:
    Type: String
    Description: Name of the GitHub Repository
  GitHubBranch:
    Type: String
    Description: Name of branch to use inside the GitHub Repository
    Default: master
  S3ArtifactStore:
    Type: String
    Description: S3 Bucket where artifacts will be stored
  EC2KeyName:
    Type: String
    Description: Existing KeyName for EC2 instance

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.2.0.0/24
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: VPC-LAB

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.2.0.0/27
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.2.0.32/27
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.2.0.64/27
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.2.0.96/27
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet2

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: InternetGateway

  NatEIP1:
    Type: AWS::EC2::EIP
  
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP1.AllocationId
      SubnetId: !Ref PublicSubnet1

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway
    DependsOn: InternetGateway

  PublicRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable1
    DependsOn: MyVPC
  
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable1
    DependsOn: MyVPC

  PublicRoute1ToInternet:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRouteNat1:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGateway1

  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable1

  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable1
    
  Subnet1privRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  Subnet2privRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable1

  EC2InstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: EC2DeployPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: Allow
                Action:
                  - "s3:Get*"
                  - "s3:List*"
                Resource: "*"

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole
    DependsOn: EC2InstanceRole

  WebServerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Join [ '-' , [ !Ref GitHubRepoName, !Ref GitHubBranch, 'LaunchTemplate' ] ]
      LaunchTemplateData:
        InstanceType: t2.micro
        ImageId: ami-01b799c439fd5516a  # Replace with your desired Amazon Linux AMI ID
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        KeyName: !Ref EC2KeyName
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum -y update
            yum install -y ruby
            yum install -y wget
            yum install -y aws-cli
            curl -fsSL https://rpm.nodesource.com/setup_20.x | sudo bash -
            yum install -y nodejs
            wget https://aws-codedeploy-us-east-1.s3.us-east-1.amazonaws.com/latest/install
            chmod +x ./install
            ./install auto
            cd /var
            mkdir nodeapp
        IamInstanceProfile:
          Arn: !GetAtt EC2InstanceProfile.Arn
    DependsOn: EC2InstanceProfile

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for instances
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyLoadBalancer
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: MyLoadBalancer
    DependsOn:
      - InternetGateway
      - AttachGateway
      - MyVPC

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Load Balancer
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: MyTargetGroup
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref MyVPC

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: MyAutoScalingGroup
      LaunchTemplate:
        LaunchTemplateId: !Ref WebServerLaunchTemplate
        Version: !GetAtt WebServerLaunchTemplate.LatestVersionNumber
      MinSize: 2
      MaxSize: 2
      DesiredCapacity: 2
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      TargetGroupARNs:
        - !Ref TargetGroup
      Tags:
        -
          Key: Name
          Value: !Join [ '-' , [ !Ref GitHubRepoName, !Ref GitHubBranch ] ]
          PropagateAtLaunch: true

  CodeDeployTrustRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Sid: "1"
            Effect: Allow
            Principal:
              Service:
                - codedeploy.us-east-1.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"

  CodeDeployRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CodeDeployPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Resource: "*"
            Action:
              - ec2:Describe*
          - Effect: Allow
            Resource: "*"
            Action:
              - autoscaling:CompleteLifecycleAction
              - autoscaling:DeleteLifecycleHook
              - autoscaling:DescribeLifecycleHooks
              - autoscaling:DescribeAutoScalingGroups
              - autoscaling:PutLifecycleHook
              - autoscaling:RecordLifecycleActionHeartbeat
      Roles:
        - !Ref CodeDeployTrustRole

  DeployApplication:
    Type: "AWS::CodeDeploy::Application"
    Properties:
      ApplicationName: !Join [ '-' , [ !Ref GitHubRepoName, !Ref GitHubBranch ] ]

  DeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    DependsOn: DeployApplication
    Properties:
      ApplicationName: !Ref DeployApplication
      DeploymentConfigName: CodeDeployDefault.HalfAtATime
      DeploymentGroupName: !Join [ '-' , [ !Ref GitHubRepoName, !Ref GitHubBranch ] ]
      Ec2TagFilters:
        - Key: Name
          Value: !Join [ '-' , [ !Ref GitHubRepoName, !Ref GitHubBranch ] ]
          Type: KEY_AND_VALUE
      ServiceRoleArn: !GetAtt [CodeDeployTrustRole, Arn]

Outputs:
  URL:
    Description: URL of the website
    Value: !GetAtt LoadBalancer.DNSName